package ventanas;

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import motor.Conexion;
import motor.Configuracion;
import motor.Exportaciones;
import motor.Funciones;
import motor.Grid;
import motor.ImprimirReport;
import motor.Main;
import motor.MergePDF;
import motor.ModeloGrid;
import org.apache.log4j.Logger;

/**
 *
 * @author jose
 */
public class ConsultarVisitas extends javax.swing.JDialog {
    private ModeloGrid dTableModelo = new ModeloGrid();
    private Grid g = new Grid();
    private Object fila[];
    private int idCliente;
    private String nombreCliente;
    private String rutaRelativa = System.getProperty("user.dir");
    private String carpetaTemporales = Configuracion.getInstance().getProperty(Configuracion.TEMP_FOLDER);
    private String nombreArchivoSalida = Configuracion.getInstance().getProperty(Configuracion.OUTPUT_FILE_NAME);
    private String nombreReporte = Configuracion.getInstance().getProperty(Configuracion.REPORT_NAME);
    private String carpetaPdf = Configuracion.getInstance().getProperty(Configuracion.PDF_FOLDER);
    // Enumeración con los meses, para filtrar con un switch
    private enum Mes { Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Septiembre, Octubre, Noviembre, Diciembre; }
    private Logger log;
    
    /**
     * Creates new form ConsultarVisitas
     */
    public ConsultarVisitas(java.awt.Frame parent, String nombreCliente, String idCliente, boolean modal) {        
        super(parent, modal);
        initComponents();
        jTableVisitas.setDefaultRenderer (Object.class, new Grid());
        this.setTitle("Consulta de Visitas - [" + nombreCliente + "]");
        this.nombreCliente = nombreCliente;
        this.setLocationRelativeTo(null);
        
        // Iniciamos el log, si tenemos activo el debug
        if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) {
            Main iniciarlog = new Main();
            log = iniciarlog.getLog();
        }
        
        // Etiqueta para almacenar el id seleccionado de la visita
        jLabelIdVisita.setText("");
        jLabelIdVisita.setVisible(false);
        
        // Agrupamos los jRadioButtons para hacer la exportaciones independientemente
        ButtonGroup grupo = new ButtonGroup();
        grupo.add(jRadioButtonExcel);
        grupo.add(jRadioButtonPdf);
        grupo.add(jRadioButtonTextoPlano);
        
        this.idCliente = Integer.parseInt(idCliente);
        
        fila= new Object[3];
        
        jTableVisitas.setModel(dTableModelo);
        dTableModelo.addColumn("Código");
        dTableModelo.addColumn("Fecha");        
        dTableModelo.addColumn("Comentarios");
        
        // Establecemos un ancho máximo a la columna del identificador
        g.establecerAnchoMaximo(jTableVisitas, "Código", 50);
        // Establecemos un ancho máximo a la columna del identificador
        g.establecerAnchoMaximo(jTableVisitas, "Fecha", 100);
        // Establecemos un ancho máximo a la columna de los comentarios
        g.establecerAnchoMaximo(jTableVisitas, "Comentarios", 1000);
        
        obtenerVisitasGrid();
        
        if(jTableVisitas.getRowCount() == 0) jButtonExportar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVisitas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonExcel = new javax.swing.JRadioButton();
        jRadioButtonPdf = new javax.swing.JRadioButton();
        jRadioButtonTextoPlano = new javax.swing.JRadioButton();
        jButtonExportar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldFecha = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaComentarios = new javax.swing.JTextArea();
        jButtonEliminarVisita = new javax.swing.JButton();
        jLabelIdVisita = new javax.swing.JLabel();
        jButtonCancelar = new javax.swing.JButton();
        jButtonNuevaVisita = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxAño = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxMes = new javax.swing.JComboBox();
        jButtonImprimirFicha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableVisitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableVisitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVisitasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVisitas);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exportar Visitas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        jRadioButtonExcel.setText("Excel");

        jRadioButtonPdf.setText("Pdf");

        jRadioButtonTextoPlano.setText("Texto plano");

        jButtonExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/flash.png"))); // NOI18N
        jButtonExportar.setText("Exportar");
        jButtonExportar.setToolTipText("Exportar visitas al formato escogido");
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRadioButtonTextoPlano)
                    .add(jRadioButtonPdf)
                    .add(jRadioButtonExcel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButtonExportar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jRadioButtonExcel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioButtonPdf)
                .add(7, 7, 7)
                .add(jRadioButtonTextoPlano)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonExportar)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Fecha de la visita:");

        jTextFieldFecha.setEditable(false);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Comentarios:");

        jTextAreaComentarios.setEditable(false);
        jTextAreaComentarios.setColumns(20);
        jTextAreaComentarios.setRows(5);
        jScrollPane2.setViewportView(jTextAreaComentarios);

        jButtonEliminarVisita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/book_blue_delete.png"))); // NOI18N
        jButtonEliminarVisita.setText("Eliminar");
        jButtonEliminarVisita.setToolTipText("Eliminar visita seleccionada");
        jButtonEliminarVisita.setEnabled(false);
        jButtonEliminarVisita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarVisitaActionPerformed(evt);
            }
        });

        jLabelIdVisita.setForeground(new java.awt.Color(0, 51, 255));
        jLabelIdVisita.setText("idVisita");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(16, 16, 16)
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(jLabelIdVisita)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButtonEliminarVisita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextFieldFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonEliminarVisita)
                    .add(jLabelIdVisita))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/delete2.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setToolTipText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonNuevaVisita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/book_blue_add.png"))); // NOI18N
        jButtonNuevaVisita.setText("Nueva Visita");
        jButtonNuevaVisita.setToolTipText("Crear una nueva visita al cliente seleccionado");
        jButtonNuevaVisita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevaVisitaActionPerformed(evt);
            }
        });

        jLabel1.setText("Filtar por año:");

        jComboBoxAño.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));
        jComboBoxAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAñoActionPerformed(evt);
            }
        });

        jLabel2.setText("Filtrar por mes:");

        jComboBoxMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        jComboBoxMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMesActionPerformed(evt);
            }
        });

        jButtonImprimirFicha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/printer2.png"))); // NOI18N
        jButtonImprimirFicha.setText("Imprimir Ficha");
        jButtonImprimirFicha.setToolTipText("Imprimir la ficha de visitas en formato pdf");
        jButtonImprimirFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirFichaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(23, 23, 23)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxAño, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 627, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(18, 18, 18)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(jButtonCancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jButtonImprimirFicha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jButtonNuevaVisita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jComboBoxAño, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jComboBoxMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonImprimirFicha)
                    .add(jButtonNuevaVisita)
                    .add(jButtonCancelar))
                .add(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableVisitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVisitasMouseClicked
        if(evt.getClickCount() == 2) {
            int columna = jTableVisitas.columnAtPoint(evt.getPoint());
            jLabelIdVisita.setText(g.seleccionarFila(jTableVisitas, dTableModelo, columna, 0));
            jTextFieldFecha.setText(g.seleccionarFila(jTableVisitas, dTableModelo, columna, 1));
            jTextAreaComentarios.setText(g.seleccionarFila(jTableVisitas, dTableModelo, columna, 2));
            jButtonEliminarVisita.setEnabled(true);
        }
    }//GEN-LAST:event_jTableVisitasMouseClicked

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonNuevaVisitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevaVisitaActionPerformed
        NuevaVisita visita = new NuevaVisita(ConsultarVisitas.this, nombreCliente, Integer.toString(idCliente), true);
        visita.setVisible(true);
        
        this.addWindowFocusListener(new WindowFocusListener() {        
            @Override
            public void windowGainedFocus(WindowEvent e) {
                obtenerVisitasGrid();                
                if(jTableVisitas.getRowCount() > 0) jButtonExportar.setEnabled(true);
            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                // No hacemos nada
            }
        });
    }//GEN-LAST:event_jButtonNuevaVisitaActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
        boolean resultado = false;
        if(jRadioButtonExcel.isSelected()) {
            File archivo = new File(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".xls");
            Exportaciones nuevaExportacion = new Exportaciones(archivo, jTableVisitas, "Visitas");
            resultado = nuevaExportacion.aExcel();
            abrirArchivo(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".xls");
        }
        
        if(jRadioButtonPdf.isSelected()) {
            File archivo = new File(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".pdf");
            Exportaciones nuevaExportacion = new Exportaciones(archivo, jTableVisitas, "");
            resultado = nuevaExportacion.aPdf();
            abrirArchivo(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".pdf");
        }
        
        if(jRadioButtonTextoPlano.isSelected()) {
            try {
                FileWriter fichero = new FileWriter(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".txt");
                Exportaciones nuevaExportacion = new Exportaciones(fichero, jTableVisitas, "");
                resultado = nuevaExportacion.aTextoPlano();
                abrirArchivo(rutaRelativa + File.separator + carpetaTemporales + File.separator + nombreArchivoSalida + ".txt");
            } catch (IOException ex) {
                if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (jButtonExportarActionPerformed)] IOException: " + ex.getMessage());
            }
        }
        
        if(resultado) { JOptionPane.showMessageDialog(null, "Exportacion realizada con éxito", "Información", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/iconos/information.png")); }
    }//GEN-LAST:event_jButtonExportarActionPerformed

    private void jComboBoxAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAñoActionPerformed
        filtrarAñoMes();
    }//GEN-LAST:event_jComboBoxAñoActionPerformed

    private void jComboBoxMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMesActionPerformed
        filtrarAñoMes();
    }//GEN-LAST:event_jComboBoxMesActionPerformed

    private void jButtonImprimirFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirFichaActionPerformed
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        
        String[] entrada = new String[2];
        String salida = rutaRelativa + File.separator + carpetaPdf + File.separator + "Ficha_Completa_" + nombreCliente +".pdf";
        
        try {
            ImprimirReport fichaAnverso = new ImprimirReport(Integer.toString(idCliente), "_Anverso");
        } catch(Exception ex) {
            if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (jButtonImprimirFichaActionPerformed)] Exception: " + ex.getMessage());
        }
        entrada[0] = rutaRelativa + File.separator + carpetaPdf + File.separator + nombreReporte + "_Anverso.pdf";
        
        if(jTableVisitas.getRowCount()>18) {           
            try {
                ImprimirReport fichaReverso = new ImprimirReport(Integer.toString(idCliente), "_Reverso");
            } catch(Exception ex) {
                if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (jButtonImprimirFichaActionPerformed)] Exception: " + ex.getMessage());
            }
            entrada[1] = rutaRelativa + File.separator + carpetaPdf + File.separator + nombreReporte + "_Reverso.pdf";            
        } else {
            try {
                ImprimirReport fichaReverso = new ImprimirReport(Integer.toString(idCliente), "_Reverso_Vacia");
            } catch(Exception ex) {
                if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (jButtonImprimirFichaActionPerformed)] Exception: " + ex.getMessage());
            }
            entrada[1] = rutaRelativa + File.separator + carpetaPdf + File.separator + nombreReporte + "_Reverso_Vacia.pdf";
        }
        
        try {
            MergePDF unirFicha = new MergePDF(entrada, salida);
        } catch(Exception ex) {
            if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (jButtonImprimirFichaActionPerformed)] Exception: " + ex.getMessage());
        }
        
        abrirArchivo(salida);
        
        borrarArchivo(entrada[0]);
        borrarArchivo(entrada[1]);
        
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonImprimirFichaActionPerformed

    private void jButtonEliminarVisitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarVisitaActionPerformed
        int siNo = JOptionPane.showConfirmDialog(null, "¿Seguro que desea eliminar los datos de la visita seleccionada?", "Confirmación", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon("src/iconos/help2.png"));
        if(siNo == 0) {
            Conexion con = new Conexion();
            
            if(con.insertarActualizarEliminar("DELETE FROM visitas WHERE visitas.id=" + Integer.parseInt(jLabelIdVisita.getText()) + " AND visitas.contador<>1") != 0) {
                JOptionPane.showMessageDialog(null, "Visita eliminada con éxito", "Información", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/iconos/information.png"));
                jTextFieldFecha.setText("");
                jTextAreaComentarios.setText("");
                jLabelIdVisita.setText("");
                jButtonEliminarVisita.setEnabled(false);
                obtenerVisitasGrid();
                if(jTableVisitas.getRowCount() == 0) jButtonExportar.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "No se puede borrar la visita de alta inicial", "Aviso", JOptionPane.ERROR_MESSAGE, new ImageIcon("src/iconos/warning.png")); 
            }
        }
    }//GEN-LAST:event_jButtonEliminarVisitaActionPerformed

    private void obtenerVisitasGrid() {
        Conexion con = new Conexion();
        
        try {
            ResultSet rs = con.consultar("SELECT visitas.id, visitas.fecha, visitas.comentarios FROM visitas WHERE visitas.id_cliente=" + idCliente + " ORDER BY visitas.fecha DESC");
            
            dTableModelo.setRowCount(0);
            
            while(rs.next()) {
                for(int i = 0; i < 3; i++) {
                    fila[i] = rs.getObject(i + 1);
                    if(rs.getMetaData().getColumnName(i + 1).equals("fecha")) {
                        String año = Funciones.Left(fila[i].toString(), 4);
                        String mes = Funciones.Right(Funciones.Left(fila[i].toString(), 7), 2);
                        String dia = Funciones.Right(fila[i].toString(), 2);
                        fila[i] = dia + "/" + mes + "/" + año;
                    }
                }
                dTableModelo.addRow(fila);                
            }
            rs.close();
            con.desconectar();
        } catch (SQLException ex) {
            if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (obtenerVisitasGrid)] " + ex.getMessage());
        }
    }
    
    public void filtrarAñoMes() {
        String año = "";
        String mes = "";
        
        // Obtenemos el año
        if(!jComboBoxAño.getSelectedItem().equals(" ")) { año = jComboBoxAño.getSelectedItem().toString(); }
        
        //obtenemos el mes
        if(!jComboBoxMes.getSelectedItem().equals(" ")) {            
            switch(Mes.valueOf(jComboBoxMes.getSelectedItem().toString())) {
                case Enero:
                    mes = "/01/";
                    break;
                case Febrero:
                    mes = "/02/";
                    break;
                case Marzo:
                    mes = "/03/";
                    break;
                case Abril:
                    mes = "/04/";
                    break;
                case Mayo:
                    mes = "/05/";
                    break;
                case Junio:
                    mes = "/06/";
                    break;
                case Julio:
                    mes = "/07/";
                    break;
                case Agosto:
                    mes = "/08/";
                    break;
                case Septiembre:
                    mes = "/09/";
                    break;
                case Octubre:
                    mes = "/10/";
                    break;
                case Noviembre:
                    mes = "/11/";
                    break;
                case Diciembre:
                    mes = "/12/";
                    break;
                default: break;
            }
        }
        
        g.aplicarFiltro(1, jTableVisitas, mes + año);
    }
    
    public void abrirArchivo(String ruta) {
        if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.info("[ConsultarVisitas.java (abrirArchivo)] " + ruta);
        Desktop escritorio = java.awt.Desktop.getDesktop();
        try {
            escritorio.open(new java.io.File(ruta));
        } catch (IOException ex) {
            if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (abrirArchivo)] " + ex.getMessage());
        }
    }
    
    public void borrarArchivo(String ruta) {
        if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.info("[ConsultarVisitas.java (borrarArchivo)] " + ruta);
        File archivo = new File(ruta);
        
        while(!archivo.delete()){
            synchronized(this){
                try {
                    this.wait(250);
                } catch (InterruptedException ex) {
                    if(Configuracion.getInstance().getProperty(Configuracion.DEBUG).equals("si")) log.error("[ConsultarVisitas.java (borrarArchivo)] " + ex.getMessage());
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultarVisitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultarVisitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultarVisitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarVisitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConsultarVisitas dialog = new ConsultarVisitas(new javax.swing.JFrame(), "", "", true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEliminarVisita;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonImprimirFicha;
    private javax.swing.JButton jButtonNuevaVisita;
    private javax.swing.JComboBox jComboBoxAño;
    private javax.swing.JComboBox jComboBoxMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelIdVisita;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonExcel;
    private javax.swing.JRadioButton jRadioButtonPdf;
    private javax.swing.JRadioButton jRadioButtonTextoPlano;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableVisitas;
    private javax.swing.JTextArea jTextAreaComentarios;
    private javax.swing.JTextField jTextFieldFecha;
    // End of variables declaration//GEN-END:variables
}
